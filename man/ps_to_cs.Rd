% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ps_cs.R
\name{ps_to_cs}
\alias{ps_to_cs}
\title{Map a ParamSet to a ConfigSpace}
\usage{
ps_to_cs(ps, json_file = NULL)
}
\arguments{
\item{ps}{\link{ParamSet}.}

\item{json_file}{(\code{character(1)}). \cr
Optional filename ending with \code{".json"}.
If specified, the returned ConfigSpace is additionally saved in the json format.
Useful for using the ConfigSpace in a pure python session.}
}
\value{
ConfigSpace
}
\description{
Maps a ParamSet to a ConfigSpace.
\link{ParamUty}s cannot be represented.
Transformation functions except for log transformations are NOT automatically handled (and ConfigSpace in general cannot do this).
To automatically handle a log transformation, set a \code{"log"} tag for the \link{Param},
if the \link{Param} would be a \link{ParamInt} after transformation, additionally set an \code{"int"} tag, see examples below.
Only \link{Condition}s of class \link{CondEqual} and \link{CondAnyOf} are supported.

Requires \CRANpkg{reticulate} and \CRANpkg{jsonlite} (if saving in json format is desired) to be installed.
}
\examples{
\dontrun{
ps = ParamSet$new(list(
 ParamDbl$new("x1", lower = log(10), upper = log(20), default = log(15), tags = c("int", "log")),
 ParamInt$new("x2", lower = 10, upper = 20, default = 15),
 ParamDbl$new("x3", lower = log(10), upper = log(20), default = log(15), tags = "log"),
 ParamDbl$new("x4", lower = 10, upper = 20, default = 15),
 ParamLgl$new("x5", default = TRUE),
 ParamFct$new("x6", levels = c("a", "b", "c"), default = "c"))
)

ps$trafo = function(x, param_set) {
 for (i in names(which(mlr3misc::map_lgl(param_set$tags, .f = function(tags) "log" \%in\% tags)))) {
   x[[i]] = if ("int" \%in\% ps$params[[i]]$tags) as.integer(round(exp(x[[i]]))) else exp(x[[i]])
 }
 x
}

ps$add_dep("x6", on = "x5", cond = CondEqual$new(TRUE))
ps$add_dep("x4", on = "x6", cond = CondAnyOf$new(c("a", "b")))

cs = ps_to_cs(ps)

dt_ps = data.table::rbindlist(generate_design_random(ps, n = 1000L)$transpose(filter_na = FALSE))
dt_cs = data.table::rbindlist(mlr3misc::map(cs$sample_configuration(1000L), function(x) {
 x$get_dictionary()
}), fill = TRUE)
summary(dt_ps)
summary(dt_cs)
all(is.na(dt_ps[x5 == FALSE][["x6"]]))  # first dependency
all(is.na(dt_cs[x5 == FALSE][["x6"]]))  # first dependency
all(is.na(dt_ps[x6 == "c"][["x4"]]))    # second dependency
all(is.na(dt_cs[x6 == "c"][["x4"]]))    # second dependency

ps_ = cs_to_ps(cs)
psparams = ps$params
ps_params = ps_$params
all.equal(psparams, ps_params[names(psparams)])
all.equal(ps$deps, ps_$deps)
# ps$trafo, ps_$trafo
dt_ps_ = data.table::rbindlist(generate_design_random(ps, n = 1000L)$transpose(filter_na = FALSE))
summary(dt_ps_)
all(is.na(dt_ps_[x5 == FALSE][["x6"]]))  # first dependency
all(is.na(dt_ps_[x6 == "c"][["x4"]]))    # second dependency
}
}
