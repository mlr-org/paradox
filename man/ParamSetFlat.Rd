% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParamSetFlat.R
\docType{data}
\name{ParamSetFlat}
\alias{ParamSetFlat}
\title{ParamSetFlat}
\format{\code{\link{R6Class}} object}
\usage{
ParamSetFlat
}
\value{
[\code{\link{ParamSet}}].
}
\description{
A \code{\link[R6]{R6Class}} to represent set of parameters in a flat form.
}
\section{Member Variables}{

  \emph{none}

Inherited from \code{ParamSet}:



\describe{
  \item{params}{[\code{list}] \cr
  List of the Params}
  \item{trafo}{[\code{function(x, dict, tags)}] \cr
    A function that returns a list of transformed x values. 
    Has to work vectorized and also return untransformed x values.
    The function takes a list \code{x} of all parameter values, additionally the dictionary linked to the \code{ParamSet}.
    \code{tags} is a named list that contains the tags for each Param in \code{x}.}
  \item{restriction}{[\code{quote}] \cr
    A quoted expression (\code{quote()}) that is evaluated on all parameter values to check if they are feasible.
    It has to be evaluated to \code{TRUE} so that the parameter value is valid.
    The expression has to work on vectors of values.}
}

Inherited from \code{ParamNode}:



\describe{
  \item{id}{[\code{character}] \cr Unique id.}
  \item{storage.type}{[\code{character(1)}] \cr How are values for this Parameter represented as an R object.}
  \item{check}{[\code{function}] \cr A function that returns \code{TRUE} for valid parameter values and a \code{character} if the value is not valid.}
  \item{assert}{[\code{function}] \cr A assertion generated by \code{\link[checkmate]{makeAssertionFunction}} from the \code{check} function.}
  \item{test}{[\code{function}] \cr A test generated by \code{\link[checkmate]{makeTestFunction}} from the \code{check} function.}
  \item{tags}{[\code{character}] \cr A vector of \code{characters} that indicate special properties of this Parameter.}
}
}

\section{Methods}{


\describe{
  \item{generateLHSDesign(n, lhs.function)}{[\code{function}] \cr
    Function to generate a LHS design.}
  \item{generateGridDesign(resolution, param.resolutions, n)}{[\code{function}] \cr
    \describe{
      \item{resolution}{[\code{integer(1)}] for each parameter universally}
      \item{param.resolutions}{[\code{integer}] for each parameter individually. Has to be a named vector.}
      \item{n}{[\code{integer(1)}] size of design. Will be tried to match by optimizing \eqn{r^k * (r-1)^(p-k) - n}. \code{r} = resolution, \code{p} = total number of parameters.}
    }
  }  
}

Inherited from \code{ParamSet}:


  \emph{none}

Inherited from \code{ParamNode}:



\describe{
  \item{sample(n)}{[\code{function}] \cr Function to sample Parameter values. Always returns a \code{data.table}.}
  \item{denorm(x)}{[\code{function}] \cr Takes a named list. Each list item contains a numerical vector with values between \code{[0,1]}. These values will be mapped to values of the Parameter Space.}
}
}

\section{Active Bindings}{


\describe{
  \item{ids}{[\code{character}] \cr
    ids of the Parameters in this ParamSet.}
  \item{storage.types}{[\code{character}] \cr
    How is a Value of this Parameter stored as an R-object?}
  \item{values}{[\code{list}] \cr
    For any discrete Parameter return the values. Also works for Integers.}
  \item{lower}{[\code{numeric}] \cr
    For each numeric Parameter return the lower boundary. \code{NA} for other Parameters.}
  \item{upper}{[\code{numeric}] \cr
    Same as for \code{lower}}
  \item{param.classes}{[\code{character}] \cr
    The \code{R6} class name of each Parameter.}
  \item{range}{[\code{data.table}] \cr
    A \code{data.table} with the columns \code{id}, \code{lower}, \code{upper}.}
  \item{length}{[\code{integer(1)}] \cr
    The number of parameters.}
  \item{nlevels}{[\code{integer}] \cr
    For each discrete Parameter return the number of different values.}
  \item{member.tags}{[\code{list}] \cr
    The \code{tags} of each Parameter.}
}

Inherited from \code{ParamSet}:



\describe{
  \item{dictionary}{[\code{list|environment}] \cr
    A dictionary that additional values that might be important for the transformation function, like \code{n} for the number of observations.}
}

Inherited from \code{ParamNode}



\describe{
  \item{has.finite.bounds}{\code{logical(1)} \cr Does the Parameter have finite bounds.}
}
}

\seealso{
Other ParamSet: \code{\link{ParamSet}}
}
\keyword{datasets}
