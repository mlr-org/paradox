[{"path":"https://paradox.mlr-org.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michel Lang. Maintainer, author. Bernd Bischl. Author. Jakob Richter. Author. Xudong Sun. Author. Martin Binder. Author. Marc Becker. Contributor.","code":""},{"path":"https://paradox.mlr-org.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lang M, Bischl B, Richter J, Sun X, Binder M (2022). paradox: Define Work Parameter Spaces Complex Algorithms. https://paradox.mlr-org.com, https://github.com/mlr-org/paradox.","code":"@Manual{,   title = {paradox: Define and Work with Parameter Spaces for Complex Algorithms},   author = {Michel Lang and Bernd Bischl and Jakob Richter and Xudong Sun and Martin Binder},   year = {2022},   note = {https://paradox.mlr-org.com, https://github.com/mlr-org/paradox}, }"},{"path":"https://paradox.mlr-org.com/index.html","id":"paradox","dir":"","previous_headings":"","what":"Define and Work with Parameter Spaces for Complex\n    Algorithms","title":"Define and Work with Parameter Spaces for Complex\n    Algorithms","text":"Package website: release | dev Universal Parameter Space Description Tools.","code":""},{"path":"https://paradox.mlr-org.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Define and Work with Parameter Spaces for Complex\n    Algorithms","text":"","code":"remotes::install_github(\"mlr-org/paradox\")"},{"path":"https://paradox.mlr-org.com/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Define and Work with Parameter Spaces for Complex\n    Algorithms","text":"Create simple ParamSet using supported Parameter Types: integer numbers (\"int\") real-valued numbers (\"dbl\") truth values TRUE FALSE (\"lgl\") categorical values set possible strings (\"fct\") types possible using transformations. Draw random samples / create random design: Generate LHS Design: Generate Grid Design: Properties parameters within ParamSet:","code":"ps = ParamSet$new(   params = list(     ParamInt$new(id = \"z\", lower = 1, upper = 3),     ParamDbl$new(id = \"x\", lower = -10, upper = 10),     ParamLgl$new(id = \"flag\"),     ParamFct$new(id = \"methods\", levels = c(\"a\",\"b\",\"c\"))   ) ) generate_design_random(ps, 3) #> <Design> with 3 rows: #>    z         x  flag methods #> 1: 1  7.660348 FALSE       b #> 2: 3  8.809346 FALSE       c #> 3: 2 -9.088870 FALSE       b requireNamespace(\"lhs\") #> Loading required namespace: lhs generate_design_lhs(ps, 3) #> <Design> with 3 rows: #>    z         x  flag methods #> 1: 1 -3.984673  TRUE       b #> 2: 2  7.938035 FALSE       a #> 3: 3  1.969783  TRUE       c generate_design_grid(ps, resolution = 2) #> <Design> with 24 rows: #>     z   x  flag methods #>  1: 1 -10  TRUE       a #>  2: 1 -10  TRUE       b #>  3: 1 -10  TRUE       c #>  4: 1 -10 FALSE       a #>  5: 1 -10 FALSE       b #>  6: 1 -10 FALSE       c #>  7: 1  10  TRUE       a #>  [ reached getOption(\"max.print\") -- omitted 18 rows ] ps$ids() #> [1] \"z\"       \"x\"       \"flag\"    \"methods\" ps$levels #> $z #> NULL #>  #> $x #> NULL #>  #> $flag #> [1]  TRUE FALSE #>  #> $methods #> [1] \"a\" \"b\" \"c\" ps$nlevels #>       z       x    flag methods  #>       3     Inf       2       3 ps$is_number #>       z       x    flag methods  #>    TRUE    TRUE   FALSE   FALSE ps$lower #>       z       x    flag methods  #>       1     -10      NA      NA ps$upper #>       z       x    flag methods  #>       3      10      NA      NA"},{"path":"https://paradox.mlr-org.com/index.html","id":"parameter-checks","dir":"","previous_headings":"Usage","what":"Parameter Checks","title":"Define and Work with Parameter Spaces for Complex\n    Algorithms","text":"Check parameter satisfies conditions ParamSet, using $test() (returns FALSE mismatch), $check() (returns error description mismatch), $assert() (throws error mismatch):","code":"ps$test(list(z = 1, x = 1)) #> [1] TRUE ps$test(list(z = -1, x = 1)) #> [1] FALSE ps$check(list(z = -1, x = 1)) #> [1] \"z: Element 1 is not >= 1\" ps$assert(list(z = -1, x = 1)) #> Error in ps$assert(list(z = -1, x = 1)): Assertion on 'list(z = -1, x = 1)' failed: z: Element 1 is not >= 1."},{"path":"https://paradox.mlr-org.com/index.html","id":"transformations","dir":"","previous_headings":"Usage","what":"Transformations","title":"Define and Work with Parameter Spaces for Complex\n    Algorithms","text":"Transformations functions fixed signature. x named list parameter values param_set ParamSet used create design Transformations can used change distributions sampled parameters. example, sample values   -uniform distribution, one can sample uniformly -3 3 exponentiate random value inside transformation. documentation can found mlr3book.","code":"ps = ParamSet$new(   params = list(     ParamInt$new(id = \"z\", lower = -3, upper = 3),     ParamDbl$new(id = \"x\", lower = 0, upper = 1)   ) ) ps$trafo = function(x, param_set) {   x$z = 2^x$z   return(x) } ps_smplr = SamplerUnif$new(ps) x = ps_smplr$sample(2) xst = x$transpose() xst #> [[1]] #> [[1]]$z #> [1] 0.125 #>  #> [[1]]$x #> [1] 0.4137243 #>  #>  #> [[2]] #> [[2]]$z #> [1] 0.5 #>  #> [[2]]$x #> [1] 0.3688455"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Dependency Condition — Condition","title":"Dependency Condition — Condition","text":"Condition object, specify condition dependency.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"currently-implemented-simple-conditions","dir":"Reference","previous_headings":"","what":"Currently implemented simple conditions","title":"Dependency Condition — Condition","text":"CondEqual$new(rhs)  Parent must equal rhs. CondAnyOf$new(rhs)  Parent must value rhs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Dependency Condition — Condition","text":"type (character(1)) Name / type condition. rhs () Right-hand-side condition.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Dependency Condition — Condition","text":"Condition$new() Condition$test() Condition$as_string() Condition$format() Condition$print() Condition$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Dependency Condition — Condition","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$new(type, rhs)"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency Condition — Condition","text":"type (character(1)) Name / type condition. rhs () Right-hand-side condition.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Dependency Condition — Condition","text":"Checks condition satisfied. Called vector parent param values.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$test(x)"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency Condition — Condition","text":"x (vector()).","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Dependency Condition — Condition","text":"logical(1).","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-as-string-","dir":"Reference","previous_headings":"","what":"Method as_string()","title":"Dependency Condition — Condition","text":"Conversion helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$as_string(lhs_chr = \"x\")"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency Condition — Condition","text":"lhs_chr (character(1))","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Dependency Condition — Condition","text":"Helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$format()"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Dependency Condition — Condition","text":"Printer.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$print(...)"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency Condition — Condition","text":"... (ignored).","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Dependency Condition — Condition","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency Condition — Condition","text":"","code":"Condition$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Condition.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency Condition — Condition","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":null,"dir":"Reference","previous_headings":"","what":"Design of Configurations — Design","title":"Design of Configurations — Design","text":"lightweight wrapper around ParamSet data.table::data.table(), latter design configurations produced former - e.g., calling generate_design_grid() sampling.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Design of Configurations — Design","text":"param_set (ParamSet). data (data.table::data.table()) Stored data.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Design of Configurations — Design","text":"Design$new() Design$format() Design$print() Design$transpose() Design$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Design of Configurations — Design","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design of Configurations — Design","text":"","code":"Design$new(param_set, data, remove_dupl)"},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design of Configurations — Design","text":"param_set (ParamSet). data (data.table::data.table()) Stored data. remove_dupl (logical(1)) Remove duplicates?","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Design of Configurations — Design","text":"Helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Design of Configurations — Design","text":"","code":"Design$format()"},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Design of Configurations — Design","text":"Printer.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Design of Configurations — Design","text":"","code":"Design$print(...)"},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design of Configurations — Design","text":"... (ignored).","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"method-transpose-","dir":"Reference","previous_headings":"","what":"Method transpose()","title":"Design of Configurations — Design","text":"Converts data list lists row-configurations, possibly removes NA entries inactive parameter values due unsatisfied dependencies, possibly calls trafo function ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Design of Configurations — Design","text":"","code":"Design$transpose(filter_na = TRUE, trafo = TRUE)"},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design of Configurations — Design","text":"filter_na (logical(1)) NA entries inactive parameter values due unsatisfied dependencies removed? trafo (logical(1)) trafo function ParamSet called?","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Design of Configurations — Design","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Design of Configurations — Design","text":"","code":"Design$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Design.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design of Configurations — Design","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain: Parameter Range without an Id — Domain","title":"Domain: Parameter Range without an Id — Domain","text":"Domain object representation single dimension ParamSet. Domain objects used construct ParamSets, either ps() short form, ParamSet$search_space() mechanism (see to_tune()). Domain corresponds Param object, except $id, trafo dependencies (depends) associated . basic Param classes (ParamInt, ParamDbl, ParamLgl, ParamFct, ParamUty) function constructing Domain object (p_int(), p_dbl(), p_lgl(), p_fct(), p_uty()). arguments corresponding Param $new() function, except without id argument, additional parameters trafo, depends. Domain objects representations parameter ranges intermediate objects used short form constructions to_tune() ps(). nature, modified user. Domain object's internals subject change relied upon.","code":""},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain: Parameter Range without an Id — Domain","text":"","code":"p_int(   lower = -Inf,   upper = Inf,   special_vals = list(),   default = NO_DEF,   tags = character(),   depends = NULL,   trafo = NULL,   logscale = FALSE )  p_dbl(   lower = -Inf,   upper = Inf,   special_vals = list(),   default = NO_DEF,   tags = character(),   tolerance = sqrt(.Machine$double.eps),   depends = NULL,   trafo = NULL,   logscale = FALSE )  p_uty(   default = NO_DEF,   tags = character(),   custom_check = NULL,   depends = NULL,   trafo = NULL )  p_lgl(   special_vals = list(),   default = NO_DEF,   tags = character(),   depends = NULL,   trafo = NULL )  p_fct(   levels,   special_vals = list(),   default = NO_DEF,   tags = character(),   depends = NULL,   trafo = NULL )"},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain: Parameter Range without an Id — Domain","text":"lower (numeric(1)) Lower bound, can -Inf. upper (numeric(1)) Upper bound can +Inf. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet. depends (call | expression) expression indicating requirement parameter constructed . Can given expression (using quote()), expression can entered directly parsed using NSE (see examples). expression may form <Param> == <value> <Param> %% <values>, result dependencies according ParamSet$add_dep(= \"<Param>\", cond = CondEqual$new(<value>)) ParamSet$add_dep(= \"<Param>\", cond = CondAnyOf$new(<values>)), respectively (see CondEqual, CondAnyOf). expression may also contain multiple conditions separated &&. trafo (function) Single argument function performing transformation parameter. Domain used construct ParamSet, transformation applied corresponding parameter part $trafo function. Note trafo inherited TuneTokens! Defining parameter e.g. p_dbl(..., trafo = ...) automatically give to_tune() assigned transformation. trafo makes sense ParamSets get used search spaces optimization tuning, useful defining domains hyperparameter ranges learning algorithms, use trafos. logscale (logical(1)) Put numeric domains log scale. Default FALSE. Log-scale Domains represent parameter ranges lower upper bounds logarithmized, trafo added exponentiates sampled values original scale. setting trafo = exp, logscale = TRUE handle parameter bounds internally: p_dbl(1, 10, logscale = TRUE) results ParamDbl lower bound 0, upper bound log(10), uses exp transformation . Therefore, given bounds represent bounds transformation. (see examples).p_int() logscale = TRUE results ParamDbl, ParamInt, bounds log(max(lower, 0.5)) ... log(upper + 1) trafo similar \".integer(exp(x))\" (additional bounds correction). lower bound lifted 0.5 lower 0 handle lower == 0 case. upper bound increased log(upper + 1) trafo otherwise almost never generate value upper. logscale TRUE, upper bounds may infinite, lower bounds greater 0 p_dbl() greater equal 0 p_int(). Note \"logscale\" inherited TuneTokens! Defining parameter p_dbl(... logscale = TRUE) automatically give to_tune() assigned log-scale. logscale makes sense ParamSets get used search spaces optimization tuning, useful defining domains hyperparameter ranges learning algorithms, use trafos.logscale happens natural (e == 2.718282...) basis. aware using different base (log10()/10^, log2()/2^) completely equivalent change values sampled transformation. tolerance (numeric(1)) Initializes $tolerance field determines custom_check (function()) Custom function check feasibility. Function checks input. Must return 'TRUE' input valid character(1) error message otherwise. function throw error. Defaults NULL, means check performed. levels (character | atomic | list) Allowed categorical values parameter. character, trafo generated converts names (given: .character() values) levels argument values. trafo performed function given trafo argument.","code":""},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain: Parameter Range without an Id — Domain","text":"Domain object.","code":""},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Domain: Parameter Range without an Id — Domain","text":"p_fct function admits levels argument goes beyond levels accepted ParamFct$new(). Instead character vector, atomic vector list (optionally named) may given. (value list named, names inferred using .character() values.) resulting Domain correspond range values given names levels argument trafo maps character names arbitrary values levels argument.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain: Parameter Range without an Id — Domain","text":"","code":"params = ps(   unbounded_integer = p_int(),   bounded_double = p_dbl(0, 10),   half_bounded_integer = p_dbl(1),   half_bounded_double = p_dbl(upper = 1),   double_with_trafo = p_dbl(-1, 1, trafo = exp),   extra_double = p_dbl(0, 1, special_vals = list(\"xxx\"), tags = \"tagged\"),   factor_param = p_fct(c(\"a\", \"b\", \"c\")),   factor_param_with_implicit_trafo = p_fct(list(a = 1, b = 2, c = list())) ) print(params) #> <ParamSet> #>                                  id    class lower upper nlevels        default #> 1:                unbounded_integer ParamInt  -Inf   Inf     Inf <NoDefault[3]> #> 2:                   bounded_double ParamDbl     0    10     Inf <NoDefault[3]> #> 3:             half_bounded_integer ParamDbl     1   Inf     Inf <NoDefault[3]> #> 4:              half_bounded_double ParamDbl  -Inf     1     Inf <NoDefault[3]> #> 5:                double_with_trafo ParamDbl    -1     1     Inf <NoDefault[3]> #> 6:                     extra_double ParamDbl     0     1     Inf <NoDefault[3]> #> 7:                     factor_param ParamFct    NA    NA       3 <NoDefault[3]> #> 8: factor_param_with_implicit_trafo ParamFct    NA    NA       3 <NoDefault[3]> #>    value #> 1:       #> 2:       #> 3:       #> 4:       #> 5:       #> 6:       #> 7:       #> 8:       #> Trafo is set.  params$trafo(list(   bounded_double = 1,   double_with_trafo = 1,   factor_param = \"c\",   factor_param_with_implicit_trafo = \"c\" )) #> $bounded_double #> [1] 1 #>  #> $double_with_trafo #> [1] 2.718282 #>  #> $factor_param #> [1] \"c\" #>  #> $factor_param_with_implicit_trafo #> list() #>   # logscale: params = ps(x = p_dbl(1, 100, logscale = TRUE))  # The ParamSet has bounds log(1) .. log(100): print(params) #> <ParamSet> #>    id    class lower   upper nlevels        default value #> 1:  x ParamDbl     0 4.60517     Inf <NoDefault[3]>       #> Trafo is set.  # When generating a equidistant grid, it is equidistant within log values grid = generate_design_grid(params, 3) print(grid) #> <Design> with 3 rows: #>           x #> 1: 0.000000 #> 2: 2.302585 #> 3: 4.605170  # But the values are on a log scale with desired bounds after trafo print(grid$transpose()) #> [[1]] #> [[1]]$x #> [1] 1 #>  #>  #> [[2]] #> [[2]]$x #> [1] 10 #>  #>  #> [[3]] #> [[3]]$x #> [1] 100 #>  #>   # Integer parameters with logscale are `ParamDbl`s pre-trafo params = ps(x = p_int(0, 10, logscale = TRUE)) print(params) #> <ParamSet> #>    id    class      lower    upper nlevels        default value #> 1:  x ParamDbl -0.6931472 2.397895     Inf <NoDefault[3]>       #> Trafo is set.  grid = generate_design_grid(params, 4) print(grid) #> <Design> with 4 rows: #>             x #> 1: -0.6931472 #> 2:  0.3372003 #> 3:  1.3675478 #> 4:  2.3978953  # ... but get transformed to integers. print(grid$transpose()) #> [[1]] #> [[1]]$x #> [1] 0 #>  #>  #> [[2]] #> [[2]]$x #> [1] 1 #>  #>  #> [[3]] #> [[3]]$x #> [1] 3 #>  #>  #> [[4]] #> [[4]]$x #> [1] 10 #>  #>"},{"path":"https://paradox.mlr-org.com/reference/NO_DEF.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra data type for ","title":"Extra data type for ","text":"Special new data type -default. often needed end-user, mainly internal. NoDefault: R6 factory. NO_DEF: R6 Singleton object type, used Param. is_nodefault(): object type 'default'?","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":null,"dir":"Reference","previous_headings":"","what":"Param Class — Param","title":"Param Class — Param","text":"abstract base class parameter objects like ParamDbl ParamFct.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"s-methods","dir":"Reference","previous_headings":"","what":"S3 methods","title":"Param Class — Param","text":".data.table() Param -> data.table::data.table() Converts param data.table::data.table() 1 row. See ParamSet.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Param Class — Param","text":"id (character(1)) Identifier object. description (character(1)) String describe parameter. Used, example, mlr3misc::rd_info() automatically generate documentation parameter sets. special_vals (list()) Arbitrary special values parameter allowed take. default () Default value. tags (character()) Arbitrary tags group subset parameters.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Param Class — Param","text":"class (character(1)) R6 class name. Read-. is_number (logical(1))TRUE parameter type \"dbl\" \"int\". is_categ (logical(1))TRUE parameter type \"fct\" \"lgl\". has_default (logical(1)) default value?","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Param Class — Param","text":"Param$new() Param$check() Param$assert() Param$test() Param$rep() Param$format() Param$print() Param$qunif() Param$convert() Param$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Param Class — Param","text":"Creates new instance R6 class. Note object typically constructed via derived classes, e.g., ParamDbl.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$new(id, special_vals, default, tags)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"id (character(1)) Identifier object. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-check-","dir":"Reference","previous_headings":"","what":"Method check()","title":"Param Class — Param","text":"checkmate-like check-function. Take value domain parameter, check feasible. value feasible storage_type, inside bounds element special_vals.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$check(x)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"x ().","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"successful TRUE, string error message.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-assert-","dir":"Reference","previous_headings":"","what":"Method assert()","title":"Param Class — Param","text":"checkmate-like assert-function. Take value domain parameter, assert feasible. value feasible storage_type, inside bounds element special_vals.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$assert(x)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"x ().","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"successful x invisibly, exception raised.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"Param Class — Param","text":"checkmate-like test-function. Take value domain parameter, test feasible. value feasible storage_type, inside bounds element special_vals.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$test(x)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"x ().","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"successful TRUE, FALSE.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-rep-","dir":"Reference","previous_headings":"","what":"Method rep()","title":"Param Class — Param","text":"Repeats parameter n-times (cloning). parameter named \"[id]rep[k]\" gets additional tag \"[id]_rep\".","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$rep(n)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"n (integer(1)).","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Param Class — Param","text":"Helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$format()"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Param Class — Param","text":"Printer.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$print(   ...,   hide_cols = c(\"nlevels\", \"is_bounded\", \"special_vals\", \"tags\", \"storage_type\") )"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"... (ignored). hide_cols (character()) fields printed? Default \"nlevels\", \"is_bounded\", \"special_vals\", \"tags\", \"storage_type\".","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-qunif-","dir":"Reference","previous_headings":"","what":"Method qunif()","title":"Param Class — Param","text":"Takes values [0,1] maps , regularly distributed, domain parameter. Think : quantile function use case map uniform-[0,1] random variable uniform sample param.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$qunif(x)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"x (numeric(1)).","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"Value domain parameter.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-convert-","dir":"Reference","previous_headings":"","what":"Method convert()","title":"Param Class — Param","text":"Converts value closest valid param. values pass $check() mostly used internally.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$convert(x)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"x ().","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Param Class — Param","text":"x converted valid type Param.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Param Class — Param","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Param Class — Param","text":"","code":"Param$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Param.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Param Class — Param","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical Parameter — ParamDbl","title":"Numerical Parameter — ParamDbl","text":"Param describe real-valued parameters.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Numerical Parameter — ParamDbl","text":"upper lower bounds $check() expanded sqrt(.Machine$double.eps) prevent errors due precision double values.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Numerical Parameter — ParamDbl","text":"paradox::Param -> ParamDbl","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Numerical Parameter — ParamDbl","text":"lower (numeric(1)) Lower bound. Always NA ParamFct, ParamLgl ParamUty. upper (numeric(1)) Upper bound. Always NA ParamFct, ParamLgl ParamUty. tolerance (numeric(1)) tolerance values accept beyond $lower $upper. Used relative absolute tolerance.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Numerical Parameter — ParamDbl","text":"levels (character() | NULL) Set allowed levels. Always NULL ParamDbl, ParamInt ParamUty. Always c(TRUE, FALSE) ParamLgl. nlevels (integer(1) | Inf) Number categorical levels. Always Inf ParamDbl ParamUty. number integers range [lower, upper], Inf unbounded ParamInt. Always 2 ParamLgl. is_bounded (logical(1)) bounds finite? Always TRUE ParamFct ParamLgl. Always FALSE ParamUty. storage_type (character(1)) Data type values parameter stored data table sampled. Always \"numeric\" ParamDbl. Always \"character\" ParamFct. Always \"integer\" ParamInt. Always \"logical\" ParamLgl. Always \"list\" ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Numerical Parameter — ParamDbl","text":"paradox::Param$assert() paradox::Param$check() paradox::Param$format() paradox::Param$print() paradox::Param$qunif() paradox::Param$rep() paradox::Param$test()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Numerical Parameter — ParamDbl","text":"ParamDbl$new() ParamDbl$convert() ParamDbl$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Numerical Parameter — ParamDbl","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical Parameter — ParamDbl","text":"","code":"ParamDbl$new(   id,   lower = -Inf,   upper = Inf,   special_vals = list(),   default = NO_DEF,   tags = character(),   tolerance = sqrt(.Machine$double.eps) )"},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical Parameter — ParamDbl","text":"id (character(1)) Identifier object. lower (numeric(1)) Lower bound, can -Inf. upper (numeric(1)) Upper bound can +Inf. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet. tolerance (numeric(1)) Initializes $tolerance field determines ","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"method-convert-","dir":"Reference","previous_headings":"","what":"Method convert()","title":"Numerical Parameter — ParamDbl","text":"Restrict value within allowed range. works conjunction $tolerance, accepts values slightly range.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical Parameter — ParamDbl","text":"","code":"ParamDbl$convert(x)"},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical Parameter — ParamDbl","text":"x (numeric(1)) Value convert.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Numerical Parameter — ParamDbl","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical Parameter — ParamDbl","text":"","code":"ParamDbl$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical Parameter — ParamDbl","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamDbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numerical Parameter — ParamDbl","text":"","code":"ParamDbl$new(\"ratio\", lower = 0, upper = 1, default = 0.5) #>       id    class lower upper levels default #> 1: ratio ParamDbl     0     1            0.5"},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Parameter — ParamFct","title":"Factor Parameter — ParamFct","text":"Param describe categorical (factor) parameters.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Factor Parameter — ParamFct","text":"paradox::Param -> ParamFct","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Factor Parameter — ParamFct","text":"levels (character() | NULL) Set allowed levels. Always NULL ParamDbl, ParamInt ParamUty. Always c(TRUE, FALSE) ParamLgl.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Factor Parameter — ParamFct","text":"lower (numeric(1)) Lower bound. Always NA ParamFct, ParamLgl ParamUty. upper (numeric(1)) Upper bound. Always NA ParamFct, ParamLgl ParamUty. nlevels (integer(1) | Inf) Number categorical levels. Always Inf ParamDbl ParamUty. number integers range [lower, upper], Inf unbounded ParamInt. Always 2 ParamLgl. is_bounded (logical(1)) bounds finite? Always TRUE ParamFct ParamLgl. Always FALSE ParamUty. storage_type (character(1)) Data type values parameter stored data table sampled. Always \"numeric\" ParamDbl. Always \"character\" ParamFct. Always \"integer\" ParamInt. Always \"logical\" ParamLgl. Always \"list\" ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Factor Parameter — ParamFct","text":"paradox::Param$assert() paradox::Param$check() paradox::Param$convert() paradox::Param$format() paradox::Param$print() paradox::Param$qunif() paradox::Param$rep() paradox::Param$test()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Factor Parameter — ParamFct","text":"ParamFct$new() ParamFct$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Factor Parameter — ParamFct","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Parameter — ParamFct","text":"","code":"ParamFct$new(   id,   levels,   special_vals = list(),   default = NO_DEF,   tags = character() )"},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Parameter — ParamFct","text":"id (character(1)) Identifier object. levels (character()) Set allowed levels. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Factor Parameter — ParamFct","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Parameter — ParamFct","text":"","code":"ParamFct$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Parameter — ParamFct","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamFct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor Parameter — ParamFct","text":"","code":"ParamFct$new(\"f\", levels = letters[1:3]) #>    id    class lower upper levels        default #> 1:  f ParamFct    NA    NA  a,b,c <NoDefault[3]>"},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer Parameter — ParamInt","title":"Integer Parameter — ParamInt","text":"Param describe integer parameters.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Integer Parameter — ParamInt","text":"See Param.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Integer Parameter — ParamInt","text":"paradox::Param -> ParamInt","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Integer Parameter — ParamInt","text":"lower (numeric(1)) Lower bound. Always NA ParamFct, ParamLgl ParamUty. upper (numeric(1)) Upper bound. Always NA ParamFct, ParamLgl ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Integer Parameter — ParamInt","text":"levels (character() | NULL) Set allowed levels. Always NULL ParamDbl, ParamInt ParamUty. Always c(TRUE, FALSE) ParamLgl. nlevels (integer(1) | Inf) Number categorical levels. Always Inf ParamDbl ParamUty. number integers range [lower, upper], Inf unbounded ParamInt. Always 2 ParamLgl. is_bounded (logical(1)) bounds finite? Always TRUE ParamFct ParamLgl. Always FALSE ParamUty. storage_type (character(1)) Data type values parameter stored data table sampled. Always \"numeric\" ParamDbl. Always \"character\" ParamFct. Always \"integer\" ParamInt. Always \"logical\" ParamLgl. Always \"list\" ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"methods-1","dir":"Reference","previous_headings":"","what":"Methods","title":"Integer Parameter — ParamInt","text":"paradox::Param$assert() paradox::Param$check() paradox::Param$format() paradox::Param$print() paradox::Param$qunif() paradox::Param$rep() paradox::Param$test()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Integer Parameter — ParamInt","text":"ParamInt$new() ParamInt$convert() ParamInt$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Integer Parameter — ParamInt","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer Parameter — ParamInt","text":"","code":"ParamInt$new(   id,   lower = -Inf,   upper = Inf,   special_vals = list(),   default = NO_DEF,   tags = character() )"},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer Parameter — ParamInt","text":"id (character(1)) Identifier object. lower (numeric(1)) Lower bound, can -Inf. upper (numeric(1)) Upper bound can +Inf. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"method-convert-","dir":"Reference","previous_headings":"","what":"Method convert()","title":"Integer Parameter — ParamInt","text":"Converts value integer.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer Parameter — ParamInt","text":"","code":"ParamInt$convert(x)"},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer Parameter — ParamInt","text":"x (numeric(1)) Value convert.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Integer Parameter — ParamInt","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer Parameter — ParamInt","text":"","code":"ParamInt$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer Parameter — ParamInt","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamInt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer Parameter — ParamInt","text":"","code":"ParamInt$new(\"count\", lower = 0, upper = 10, default = 1) #>       id    class lower upper levels default #> 1: count ParamInt     0    10              1"},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical Parameter — ParamLgl","title":"Logical Parameter — ParamLgl","text":"Param describe logical parameters.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Logical Parameter — ParamLgl","text":"paradox::Param -> ParamLgl","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Logical Parameter — ParamLgl","text":"lower (numeric(1)) Lower bound. Always NA ParamFct, ParamLgl ParamUty. upper (numeric(1)) Upper bound. Always NA ParamFct, ParamLgl ParamUty. levels (character() | NULL) Set allowed levels. Always NULL ParamDbl, ParamInt ParamUty. Always c(TRUE, FALSE) ParamLgl. nlevels (integer(1) | Inf) Number categorical levels. Always Inf ParamDbl ParamUty. number integers range [lower, upper], Inf unbounded ParamInt. Always 2 ParamLgl. is_bounded (logical(1)) bounds finite? Always TRUE ParamFct ParamLgl. Always FALSE ParamUty. storage_type (character(1)) Data type values parameter stored data table sampled. Always \"numeric\" ParamDbl. Always \"character\" ParamFct. Always \"integer\" ParamInt. Always \"logical\" ParamLgl. Always \"list\" ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Logical Parameter — ParamLgl","text":"paradox::Param$assert() paradox::Param$check() paradox::Param$convert() paradox::Param$format() paradox::Param$print() paradox::Param$qunif() paradox::Param$rep() paradox::Param$test()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logical Parameter — ParamLgl","text":"ParamLgl$new() ParamLgl$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logical Parameter — ParamLgl","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical Parameter — ParamLgl","text":"","code":"ParamLgl$new(id, special_vals = list(), default = NO_DEF, tags = character())"},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical Parameter — ParamLgl","text":"id (character(1)) Identifier object. special_vals (list()) Arbitrary special values parameter allowed take, make feasible. allows extending domain parameter. Note values used feasibility checks, neither generating designs sampling. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logical Parameter — ParamLgl","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical Parameter — ParamLgl","text":"","code":"ParamLgl$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical Parameter — ParamLgl","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamLgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical Parameter — ParamLgl","text":"","code":"ParamLgl$new(\"flag\", default = TRUE) #>      id    class lower upper      levels default #> 1: flag ParamLgl    NA    NA  TRUE,FALSE    TRUE"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":null,"dir":"Reference","previous_headings":"","what":"ParamSet — ParamSet","title":"ParamSet — ParamSet","text":"set Param objects. Please note creating set adding , parameters resulting set uniquely named IDs valid R names. set also contains member variable values can used store active configuration / partially fix parameters constant values (regarding subsequent sampling generation designs).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"s-methods-and-type-converters","dir":"Reference","previous_headings":"","what":"S3 methods and type converters","title":"ParamSet — ParamSet","text":".data.table() ParamSet -> data.table::data.table() Compact representation datatable. Col types : id: character lower, upper: double levels: list col, NULL elements special_vals: list col list is_bounded: logical default: list col, NULL elements storage_type: character tags: list col character vectors","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ParamSet — ParamSet","text":"assert_values (logical(1)) values checked validity assigment active binding $values? Default TRUE, switch know .","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"ParamSet — ParamSet","text":"params (named list()) List Param, named respective ID. params_unid (named list()) List Param, named true ID. However, field Param's $id value set potentially invalid value. active binding used internally. deps (data.table::data.table()) Table cols id (character(1)) (character(1)) cond (Condition). Lists (direct) dependency parents param, parameter IDs. Internally created call add_dep. Settable, want remove dependencies perform changes. set_id (character(1)) ID param set. Default \"\". Settable. length (integer(1)) Number contained Params. is_empty (logical(1)) ParamSet empty? class (named character()) Classes contained parameters, named parameter IDs. lower (named double()) Lower bounds parameters (NA parameter numeric). Named parameter IDs. upper (named double()) Upper bounds parameters (NA parameter numeric). Named parameter IDs. levels (named list()) List character vectors allowed categorical values contained parameters. NULL parameter categorical. Named parameter IDs. nlevels (named integer()) Number categorical levels per parameter, Inf double parameters unbounded integer parameters. Named param IDs. is_bounded (named logical()) parameters finite bounds? Named parameter IDs. special_vals (named list() list()) Special values parameters. Named parameter IDs. default (named list()) Default values parameters. default exists, element present. Named parameter IDs. tags (named list() character()) Can used group subset parameters. Named parameter IDs. storage_type (character()) Data types parameters stored tables. Named parameter IDs. is_number (named logical()) Position TRUE ParamDbl ParamInt. Named parameter IDs. is_categ (named logical()) Position TRUE ParamFct ParamLgl. Named parameter IDs. all_numeric (logical(1)) TRUE parameters ParamDbl ParamInt. all_categorical (logical(1)) TRUE parameters ParamFct ParamLgl. trafo (function(x, param_set)) Transformation function. Settable. User pass function(x, param_set), form (named list(), ParamSet) -> named list(). function responsible transform feasible configuration another encoding, potentially evaluating configuration target algorithm. output, many things hold. needs unique names, target algorithm accept configuration. convenience, self-paramset also passed , need info (e.g. tags). NULL default, can set NULL switch transformation . has_trafo (logical(1)) set trafo function? values (named list()) Currently set / fixed parameter values. Settable, feasibility values checked set . set values parameters, subset. set values, previously set values unset / removed. has_deps (logical(1)) set parameter dependencies?","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ParamSet — ParamSet","text":"ParamSet$new() ParamSet$add() ParamSet$ids() ParamSet$get_values() ParamSet$set_values() ParamSet$subset() ParamSet$search_space() ParamSet$check() ParamSet$test() ParamSet$assert() ParamSet$check_dt() ParamSet$test_dt() ParamSet$assert_dt() ParamSet$add_dep() ParamSet$format() ParamSet$print() ParamSet$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ParamSet — ParamSet","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$new(params = named_list())"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"params (list()) List Param, named respective ID. Parameters cloned.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"ParamSet — ParamSet","text":"Adds single param another set set, params cloned.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$add(p)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"p (Param | ParamSet).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-ids-","dir":"Reference","previous_headings":"","what":"Method ids()","title":"ParamSet — ParamSet","text":"Retrieves IDs contained parameters based filter criteria selections, NULL means restriction. returns IDs parameters satisfy conditions.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$ids(class = NULL, is_bounded = NULL, tags = NULL)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"class (character()). is_bounded (logical(1)). tags (character()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"character().","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-get-values-","dir":"Reference","previous_headings":"","what":"Method get_values()","title":"ParamSet — ParamSet","text":"Retrieves parameter values based selections, NULL means restriction equivalent $values. returns values parameters satisfy conditions.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$get_values(   class = NULL,   is_bounded = NULL,   tags = NULL,   type = \"with_token\",   check_required = TRUE )"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"class (character()). is_bounded (logical(1)). tags (character()). type (character(1)) Return values with_token, without_token only_token? check_required (logical(1)) Check required parameters set?","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"Named list().","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-set-values-","dir":"Reference","previous_headings":"","what":"Method set_values()","title":"ParamSet — ParamSet","text":"Allows modify (overwrite) replace parameter values. Per default already set values kept unless new values provided.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$set_values(..., .values = list(), .insert = TRUE)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"... () Named parameter values. .values (named list()) Named list parameter values. Names must already appear .... .insert (logical(1)) Whether insert values (old values kept, overwritten), replace values. Default TRUE.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-subset-","dir":"Reference","previous_headings":"","what":"Method subset()","title":"ParamSet — ParamSet","text":"Changes current set set passed IDs.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$subset(ids)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"ids (character()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-search-space-","dir":"Reference","previous_headings":"","what":"Method search_space()","title":"ParamSet — ParamSet","text":"Construct ParamSet tune . Constructed TuneToken $values, see to_tune().","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$search_space(values = self$values)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"values (named list): optional named list TuneToken objects convert, place $values.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-check-","dir":"Reference","previous_headings":"","what":"Method check()","title":"ParamSet — ParamSet","text":"checkmate-like check-function. Takes named list. point x feasible, configures subset params, individual param constraints satisfied dependencies satisfied. Params dependencies satisfied part x.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$check(xs)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xs (named list()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful TRUE, string error message.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-test-","dir":"Reference","previous_headings":"","what":"Method test()","title":"ParamSet — ParamSet","text":"checkmate-like test-function. Takes named list. point x feasible, configures subset params, individual param constraints satisfied dependencies satisfied. Params dependencies satisfied part x.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$test(xs)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xs (named list()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful TRUE, FALSE.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-assert-","dir":"Reference","previous_headings":"","what":"Method assert()","title":"ParamSet — ParamSet","text":"checkmate-like assert-function. Takes named list. point x feasible, configures subset params, individual param constraints satisfied dependencies satisfied. Params dependencies satisfied part x.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$assert(xs, .var.name = vname(xs))"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xs (named list()). .var.name (character(1)) Name checked object print error messages. Defaults heuristic implemented vname.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful xs invisibly, error message.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-check-dt-","dir":"Reference","previous_headings":"","what":"Method check_dt()","title":"ParamSet — ParamSet","text":"checkmate-like check-function. Takes data.table::data.table rows points columns parameters. point x feasible, configures subset params, individual param constraints satisfied dependencies satisfied. Params dependencies satisfied set NA xdt.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$check_dt(xdt)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xdt (data.table::data.table | data.frame()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful TRUE, string error message.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-test-dt-","dir":"Reference","previous_headings":"","what":"Method test_dt()","title":"ParamSet — ParamSet","text":"checkmate-like test-function (s. $check_dt()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$test_dt(xdt)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xdt (data.table::data.table).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful TRUE, FALSE.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-assert-dt-","dir":"Reference","previous_headings":"","what":"Method assert_dt()","title":"ParamSet — ParamSet","text":"checkmate-like assert-function (s. $check_dt()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$assert_dt(xdt, .var.name = vname(xdt))"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"xdt (data.table::data.table). .var.name (character(1)) Name checked object print error messages. Defaults heuristic implemented vname.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"ParamSet — ParamSet","text":"successful xs invisibly, error message.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-add-dep-","dir":"Reference","previous_headings":"","what":"Method add_dep()","title":"ParamSet — ParamSet","text":"Adds dependency set, param id now depends param .","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$add_dep(id, on, cond)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"id (character(1)). (character(1)). cond (Condition).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"ParamSet — ParamSet","text":"Helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$format()"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"ParamSet — ParamSet","text":"Printer.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$print(   ...,   hide_cols = c(\"levels\", \"is_bounded\", \"special_vals\", \"tags\", \"storage_type\") )"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"... (ignored). hide_cols (character()) fields printed? Default \"levels\", \"is_bounded\", \"special_vals\", \"tags\", \"storage_type\".","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ParamSet — ParamSet","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSet — ParamSet","text":"","code":"ParamSet$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSet — ParamSet","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ParamSet — ParamSet","text":"","code":"ps = ParamSet$new(   params = list(     ParamDbl$new(\"d\", lower = -5, upper = 5, default = 0),     ParamFct$new(\"f\", levels = letters[1:3])   ) )  ps$trafo = function(x, param_set) {   x$d = 2^x$d   return(x) }  ps$add(ParamInt$new(\"i\", lower = 0L, upper = 16L))  ps$check(list(d = 2.1, f = \"a\", i = 3L)) #> [1] TRUE"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"ParamSetCollection — ParamSetCollection","title":"ParamSetCollection — ParamSetCollection","text":"collection multiple ParamSet objects. collection basically light-weight wrapper / container around references multiple sets. order ensure unique param names, every param collection referred \"<set_id>.<param_id>\". Parameters ParamSets empty (.e. \"\") $set_id referenced directly. Multiple ParamSets $set_id \"\" can combined, parameter names must unique. Operation subset currently allowed. Operation add currently works adding complete sets single params. either ask 'values' set , operation delegated individual, contained param set references. collection maintain values state. also implies directly change values one referenced sets, change reflected collection. Dependencies: possible currently handle dependencies regarding parameters inside set - case simply add dependency set, best adding set collection across sets, param one set depends state param another set - case add call add_dep collection. call deps collection, returned complete table dependencies, sets across sets.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"ParamSetCollection — ParamSetCollection","text":"paradox::ParamSet -> ParamSetCollection","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"ParamSetCollection — ParamSetCollection","text":"params (named list()) List Param, named respective ID. params_unid (named list()) List Param, named true ID. However, field Param's $id value set potentially invalid value. active binding used internally. deps (data.table::data.table()) Table cols id (character(1)) (character(1)) cond (Condition). Lists (direct) dependency parents param, parameter IDs. Internally created call add_dep. Settable, want remove dependencies perform changes. values (named list()) Currently set / fixed parameter values. Settable, feasibility values checked set . set values parameters, subset. set values, previously set values unset / removed.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"ParamSetCollection — ParamSetCollection","text":"paradox::ParamSet$add_dep() paradox::ParamSet$assert() paradox::ParamSet$assert_dt() paradox::ParamSet$check() paradox::ParamSet$check_dt() paradox::ParamSet$format() paradox::ParamSet$get_values() paradox::ParamSet$ids() paradox::ParamSet$print() paradox::ParamSet$search_space() paradox::ParamSet$set_values() paradox::ParamSet$test() paradox::ParamSet$test_dt()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ParamSetCollection — ParamSetCollection","text":"ParamSetCollection$new() ParamSetCollection$add() ParamSetCollection$remove_sets() ParamSetCollection$subset() ParamSetCollection$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ParamSetCollection — ParamSetCollection","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSetCollection — ParamSetCollection","text":"","code":"ParamSetCollection$new(sets)"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSetCollection — ParamSetCollection","text":"sets (list() ParamSet) Parameter objects cloned.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"ParamSetCollection — ParamSetCollection","text":"Adds set collection.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSetCollection — ParamSetCollection","text":"","code":"ParamSetCollection$add(p)"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSetCollection — ParamSetCollection","text":"p (ParamSet).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"method-remove-sets-","dir":"Reference","previous_headings":"","what":"Method remove_sets()","title":"ParamSetCollection — ParamSetCollection","text":"Removes sets given ids collection.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSetCollection — ParamSetCollection","text":"","code":"ParamSetCollection$remove_sets(ids)"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSetCollection — ParamSetCollection","text":"ids (character()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"method-subset-","dir":"Reference","previous_headings":"","what":"Method subset()","title":"ParamSetCollection — ParamSetCollection","text":"included consistency. allowed perform ParamSetCollections.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSetCollection — ParamSetCollection","text":"","code":"ParamSetCollection$subset(ids)"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSetCollection — ParamSetCollection","text":"ids (character()).","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"ParamSetCollection — ParamSetCollection","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ParamSetCollection — ParamSetCollection","text":"","code":"ParamSetCollection$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamSetCollection.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"ParamSetCollection — ParamSetCollection","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":null,"dir":"Reference","previous_headings":"","what":"Untyped Parameter — ParamUty","title":"Untyped Parameter — ParamUty","text":"Param describe untyped parameters.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Untyped Parameter — ParamUty","text":"paradox::Param -> ParamUty","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Untyped Parameter — ParamUty","text":"custom_check (function()) Custom function check feasibility. repr (character(1)) Custom field printing parameter table.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Untyped Parameter — ParamUty","text":"lower (numeric(1)) Lower bound. Always NA ParamFct, ParamLgl ParamUty. upper (numeric(1)) Upper bound. Always NA ParamFct, ParamLgl ParamUty. levels (character() | NULL) Set allowed levels. Always NULL ParamDbl, ParamInt ParamUty. Always c(TRUE, FALSE) ParamLgl. nlevels (integer(1) | Inf) Number categorical levels. Always Inf ParamDbl ParamUty. number integers range [lower, upper], Inf unbounded ParamInt. Always 2 ParamLgl. is_bounded (logical(1)) bounds finite? Always TRUE ParamFct ParamLgl. Always FALSE ParamUty. storage_type (character(1)) Data type values parameter stored data table sampled. Always \"numeric\" ParamDbl. Always \"character\" ParamFct. Always \"integer\" ParamInt. Always \"logical\" ParamLgl. Always \"list\" ParamUty.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Untyped Parameter — ParamUty","text":"paradox::Param$assert() paradox::Param$check() paradox::Param$convert() paradox::Param$format() paradox::Param$print() paradox::Param$qunif() paradox::Param$rep() paradox::Param$test()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Untyped Parameter — ParamUty","text":"ParamUty$new() ParamUty$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Untyped Parameter — ParamUty","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untyped Parameter — ParamUty","text":"","code":"ParamUty$new(   id,   default = NO_DEF,   tags = character(),   custom_check = NULL,   repr = substitute(default) )"},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untyped Parameter — ParamUty","text":"id (character(1)) Identifier object. default () Default value. Can domain parameter element special_vals. value NO_DEF default exists. NULL can valid default. value effect ParamSet$values behavior ParamSet$check(), $test() $assert(). default intended used documentation purposes. ` tags (character()) Arbitrary tags group subset parameters. tags serve special purpose: \"required\" implies parameters given setting values ParamSet. custom_check (function()) Custom function check feasibility. Function checks input. Must return 'TRUE' input valid string error message otherwise. Defaults NULL, means check performed. repr (character(1)) Custom representation string. Used parameter table help pages.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Untyped Parameter — ParamUty","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Untyped Parameter — ParamUty","text":"","code":"ParamUty$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untyped Parameter — ParamUty","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/ParamUty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Untyped Parameter — ParamUty","text":"","code":"ParamUty$new(\"untyped\", default = Inf) #>         id    class lower upper levels default #> 1: untyped ParamUty    NA    NA            Inf"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler Class — Sampler","title":"Sampler Class — Sampler","text":"abstract base class sampling objects like Sampler1D, SamplerHierarchical SamplerJointIndep.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Sampler Class — Sampler","text":"param_set (ParamSet) Domain / support distribution want sample .","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler Class — Sampler","text":"Sampler$new() Sampler$sample() Sampler$format() Sampler$print() Sampler$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler Class — Sampler","text":"Creates new instance R6 class. Note object typically constructed via derived classes, e.g., Sampler1D.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler Class — Sampler","text":"","code":"Sampler$new(param_set)"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler Class — Sampler","text":"param_set (ParamSet) Domain / support distribution want sample . ParamSet cloned construction.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"method-sample-","dir":"Reference","previous_headings":"","what":"Method sample()","title":"Sampler Class — Sampler","text":"Sample n values distribution.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler Class — Sampler","text":"","code":"Sampler$sample(n)"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler Class — Sampler","text":"n (integer(1)).","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Sampler Class — Sampler","text":"Design.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"Sampler Class — Sampler","text":"Helper print outputs.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler Class — Sampler","text":"","code":"Sampler$format()"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Sampler Class — Sampler","text":"Printer.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler Class — Sampler","text":"","code":"Sampler$print(...)"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler Class — Sampler","text":"... (ignored).","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler Class — Sampler","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler Class — Sampler","text":"","code":"Sampler$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler Class — Sampler","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler1D Class — Sampler1D","title":"Sampler1D Class — Sampler1D","text":"1D sampler, abstract base class Sampler like Sampler1DUnif, Sampler1DRfun, Sampler1DCateg Sampler1DNormal.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Sampler1D Class — Sampler1D","text":"paradox::Sampler -> Sampler1D","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Sampler1D Class — Sampler1D","text":"param (Param) Returns one Parameter sampled .","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sampler1D Class — Sampler1D","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler1D Class — Sampler1D","text":"Sampler1D$new() Sampler1D$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler1D Class — Sampler1D","text":"Creates new instance R6 class. Note object typically constructed via derived classes, e.g., Sampler1DUnif.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1D Class — Sampler1D","text":"","code":"Sampler1D$new(param)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1D Class — Sampler1D","text":"param (Param) Domain / support distribution want sample .","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler1D Class — Sampler1D","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1D Class — Sampler1D","text":"","code":"Sampler1D$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1D.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1D Class — Sampler1D","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler1DCateg Class — Sampler1DCateg","title":"Sampler1DCateg Class — Sampler1DCateg","text":"Sampling discrete distribution, ParamFct ParamLgl.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sampler1DCateg Class — Sampler1DCateg","text":"paradox::Sampler -> paradox::Sampler1D -> Sampler1DCateg","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Sampler1DCateg Class — Sampler1DCateg","text":"prob (numeric() | NULL) Numeric vector param$nlevels probabilities.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sampler1DCateg Class — Sampler1DCateg","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler1DCateg Class — Sampler1DCateg","text":"Sampler1DCateg$new() Sampler1DCateg$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler1DCateg Class — Sampler1DCateg","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DCateg Class — Sampler1DCateg","text":"","code":"Sampler1DCateg$new(param, prob = NULL)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DCateg Class — Sampler1DCateg","text":"param (Param) Domain / support distribution want sample . prob (numeric() | NULL) Numeric vector param$nlevels probabilities, uniform default.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler1DCateg Class — Sampler1DCateg","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DCateg Class — Sampler1DCateg","text":"","code":"Sampler1DCateg$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DCateg.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DCateg Class — Sampler1DCateg","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler1DNormal Class — Sampler1DNormal","title":"Sampler1DNormal Class — Sampler1DNormal","text":"Normal sampling (potentially truncated) ParamDbl.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sampler1DNormal Class — Sampler1DNormal","text":"paradox::Sampler -> paradox::Sampler1D -> paradox::Sampler1DRfun -> Sampler1DNormal","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Sampler1DNormal Class — Sampler1DNormal","text":"mean (numeric(1)) Mean parameter normal distribution. sd (numeric(1)) SD parameter normal distribution.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sampler1DNormal Class — Sampler1DNormal","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler1DNormal Class — Sampler1DNormal","text":"Sampler1DNormal$new() Sampler1DNormal$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler1DNormal Class — Sampler1DNormal","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DNormal Class — Sampler1DNormal","text":"","code":"Sampler1DNormal$new(param, mean = NULL, sd = NULL)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DNormal Class — Sampler1DNormal","text":"param (Param) Domain / support distribution want sample . mean (numeric(1)) Mean parameter normal distribution. Default mean(c(param$lower, param$upper). sd (numeric(1)) SD parameter normal distribution. Default (param$upper - param$lower)/4.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler1DNormal Class — Sampler1DNormal","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DNormal Class — Sampler1DNormal","text":"","code":"Sampler1DNormal$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DNormal.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DNormal Class — Sampler1DNormal","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler1DRfun Class — Sampler1DRfun","title":"Sampler1DRfun Class — Sampler1DRfun","text":"Arbitrary sampling 1D RNG functions R.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sampler1DRfun Class — Sampler1DRfun","text":"paradox::Sampler -> paradox::Sampler1D -> Sampler1DRfun","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Sampler1DRfun Class — Sampler1DRfun","text":"rfun (function()) Random number generator function. trunc (logical(1))TRUE enables naive rejection sampling, stay inside [lower, upper].","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sampler1DRfun Class — Sampler1DRfun","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler1DRfun Class — Sampler1DRfun","text":"Sampler1DRfun$new() Sampler1DRfun$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler1DRfun Class — Sampler1DRfun","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DRfun Class — Sampler1DRfun","text":"","code":"Sampler1DRfun$new(param, rfun, trunc = TRUE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DRfun Class — Sampler1DRfun","text":"param (Param) Domain / support distribution want sample . rfun (function()) Random number generator function, e.g. rexp sample exponential distribution. trunc (logical(1))TRUE enables naive rejection sampling, stay inside [lower, upper].","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler1DRfun Class — Sampler1DRfun","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DRfun Class — Sampler1DRfun","text":"","code":"Sampler1DRfun$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DRfun.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DRfun Class — Sampler1DRfun","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampler1DUnif Class — Sampler1DUnif","title":"Sampler1DUnif Class — Sampler1DUnif","text":"Uniform random sampler arbitrary (bounded) parameters.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Sampler1DUnif Class — Sampler1DUnif","text":"paradox::Sampler -> paradox::Sampler1D -> Sampler1DUnif","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Sampler1DUnif Class — Sampler1DUnif","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Sampler1DUnif Class — Sampler1DUnif","text":"Sampler1DUnif$new() Sampler1DUnif$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Sampler1DUnif Class — Sampler1DUnif","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DUnif Class — Sampler1DUnif","text":"","code":"Sampler1DUnif$new(param)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DUnif Class — Sampler1DUnif","text":"param (Param) Domain / support distribution want sample .","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Sampler1DUnif Class — Sampler1DUnif","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampler1DUnif Class — Sampler1DUnif","text":"","code":"Sampler1DUnif$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/Sampler1DUnif.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampler1DUnif Class — Sampler1DUnif","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"SamplerHierarchical Class — SamplerHierarchical","title":"SamplerHierarchical Class — SamplerHierarchical","text":"Hierarchical sampling arbitrary param sets dependencies, user specifies 1D samplers per param. Dependencies topologically sorted, parameters sampled topological order, dependencies hold, values set NA resulting data.table.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"SamplerHierarchical Class — SamplerHierarchical","text":"paradox::Sampler -> SamplerHierarchical","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"SamplerHierarchical Class — SamplerHierarchical","text":"samplers (list()) List Sampler1D objects gives Sampler Param param_set.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SamplerHierarchical Class — SamplerHierarchical","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SamplerHierarchical Class — SamplerHierarchical","text":"SamplerHierarchical$new() SamplerHierarchical$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SamplerHierarchical Class — SamplerHierarchical","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerHierarchical Class — SamplerHierarchical","text":"","code":"SamplerHierarchical$new(param_set, samplers)"},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerHierarchical Class — SamplerHierarchical","text":"param_set (ParamSet) Domain / support distribution want sample . ParamSet cloned construction. samplers (list()) List Sampler1D objects gives Sampler Param param_set.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SamplerHierarchical Class — SamplerHierarchical","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerHierarchical Class — SamplerHierarchical","text":"","code":"SamplerHierarchical$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/SamplerHierarchical.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerHierarchical Class — SamplerHierarchical","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":null,"dir":"Reference","previous_headings":"","what":"SamplerJointIndep Class — SamplerJointIndep","title":"SamplerJointIndep Class — SamplerJointIndep","text":"Create joint, independent sampler multiple samplers.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"SamplerJointIndep Class — SamplerJointIndep","text":"paradox::Sampler -> SamplerJointIndep","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"SamplerJointIndep Class — SamplerJointIndep","text":"samplers (list()) List Sampler objects.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SamplerJointIndep Class — SamplerJointIndep","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SamplerJointIndep Class — SamplerJointIndep","text":"SamplerJointIndep$new() SamplerJointIndep$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SamplerJointIndep Class — SamplerJointIndep","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerJointIndep Class — SamplerJointIndep","text":"","code":"SamplerJointIndep$new(samplers)"},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerJointIndep Class — SamplerJointIndep","text":"samplers (list()) List Sampler objects.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SamplerJointIndep Class — SamplerJointIndep","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerJointIndep Class — SamplerJointIndep","text":"","code":"SamplerJointIndep$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/SamplerJointIndep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerJointIndep Class — SamplerJointIndep","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":null,"dir":"Reference","previous_headings":"","what":"SamplerUnif Class — SamplerUnif","title":"SamplerUnif Class — SamplerUnif","text":"Uniform random sampling arbitrary (bounded) ParamSet. Constructs 1 uniform sampler per Param, passes SamplerHierarchical. Hence, also works ParamSets sets dependencies.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"SamplerUnif Class — SamplerUnif","text":"paradox::Sampler -> paradox::SamplerHierarchical -> SamplerUnif","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"SamplerUnif Class — SamplerUnif","text":"paradox::Sampler$format() paradox::Sampler$print() paradox::Sampler$sample()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SamplerUnif Class — SamplerUnif","text":"SamplerUnif$new() SamplerUnif$clone()","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SamplerUnif Class — SamplerUnif","text":"Creates new instance R6 class.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerUnif Class — SamplerUnif","text":"","code":"SamplerUnif$new(param_set)"},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerUnif Class — SamplerUnif","text":"param_set (ParamSet) Domain / support distribution want sample . ParamSet cloned construction.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SamplerUnif Class — SamplerUnif","text":"objects class cloneable method.","code":""},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SamplerUnif Class — SamplerUnif","text":"","code":"SamplerUnif$clone(deep = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/SamplerUnif.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SamplerUnif Class — SamplerUnif","text":"deep Whether make deep clone.","code":""},{"path":"https://paradox.mlr-org.com/reference/assert_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertions for Params and ParamSets — assert_param","title":"Assertions for Params and ParamSets — assert_param","text":"Assertions Params ParamSets","code":""},{"path":"https://paradox.mlr-org.com/reference/assert_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertions for Params and ParamSets — assert_param","text":"","code":"assert_param(param, cl = \"Param\", no_untyped = FALSE, must_bounded = FALSE)  assert_param_set(   param_set,   cl = \"Param\",   no_untyped = FALSE,   must_bounded = FALSE,   no_deps = FALSE )"},{"path":"https://paradox.mlr-org.com/reference/assert_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertions for Params and ParamSets — assert_param","text":"param (Param). cl (character()) Allowed subclasses. no_untyped (logical(1)) untyped Params allowed? must_bounded (logical(1)) bounded Params allowed? param_set (ParamSet). no_deps (logical(1)) dependencies allowed?","code":""},{"path":"https://paradox.mlr-org.com/reference/assert_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assertions for Params and ParamSets — assert_param","text":"checked object, invisibly.","code":""},{"path":"https://paradox.mlr-org.com/reference/default_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameter Default Values — default_values","title":"Extract Parameter Default Values — default_values","text":"Extract parameter default values.","code":""},{"path":"https://paradox.mlr-org.com/reference/default_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameter Default Values — default_values","text":"","code":"default_values(x, ...)  # S3 method for ParamSet default_values(x, ...)"},{"path":"https://paradox.mlr-org.com/reference/default_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameter Default Values — default_values","text":"x () Object extract default values . ... () Additional arguments.","code":""},{"path":"https://paradox.mlr-org.com/reference/default_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameter Default Values — default_values","text":"list().","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Grid Design — generate_design_grid","title":"Generate a Grid Design — generate_design_grid","text":"Generate grid specified resolution parameter space. resolution categorical parameters ignored, parameters always produce grid valid levels. number params endpoints params always included grid.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Grid Design — generate_design_grid","text":"","code":"generate_design_grid(param_set, resolution = NULL, param_resolutions = NULL)"},{"path":"https://paradox.mlr-org.com/reference/generate_design_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Grid Design — generate_design_grid","text":"param_set (ParamSet). resolution (integer(1)) Global resolution Params. param_resolutions (named integer()) Resolution per Param, named parameter ID.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Grid Design — generate_design_grid","text":"Design.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/generate_design_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Grid Design — generate_design_grid","text":"","code":"ps = ParamSet$new(list(   ParamDbl$new(\"ratio\", lower = 0, upper = 1),   ParamFct$new(\"letters\", levels = letters[1:3]) )) generate_design_grid(ps, 10) #> <Design> with 30 rows: #>         ratio letters #>  1: 0.0000000       a #>  2: 0.0000000       b #>  3: 0.0000000       c #>  4: 0.1111111       a #>  5: 0.1111111       b #>  6: 0.1111111       c #>  7: 0.2222222       a #>  8: 0.2222222       b #>  9: 0.2222222       c #> 10: 0.3333333       a #> 11: 0.3333333       b #> 12: 0.3333333       c #> 13: 0.4444444       a #> 14: 0.4444444       b #> 15: 0.4444444       c #> 16: 0.5555556       a #> 17: 0.5555556       b #> 18: 0.5555556       c #> 19: 0.6666667       a #> 20: 0.6666667       b #> 21: 0.6666667       c #> 22: 0.7777778       a #> 23: 0.7777778       b #> 24: 0.7777778       c #> 25: 0.8888889       a #> 26: 0.8888889       b #> 27: 0.8888889       c #> 28: 1.0000000       a #> 29: 1.0000000       b #> 30: 1.0000000       c #>         ratio letters"},{"path":"https://paradox.mlr-org.com/reference/generate_design_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Space-Filling LHS Design — generate_design_lhs","title":"Generate a Space-Filling LHS Design — generate_design_lhs","text":"Generate space-filling design using Latin hypercube sampling. Dependent parameters whose constraints unsatisfied generate NA entries respective columns.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Space-Filling LHS Design — generate_design_lhs","text":"","code":"generate_design_lhs(param_set, n, lhs_fun = NULL)"},{"path":"https://paradox.mlr-org.com/reference/generate_design_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Space-Filling LHS Design — generate_design_lhs","text":"param_set (ParamSet). n (integer(1))  Number points sample. lhs_fun (function(n, k)) Function use generate LHS sample, n samples k values per param. LHS functions implemented package lhs, default use lhs::maximinLHS().","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Space-Filling LHS Design — generate_design_lhs","text":"Design.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/generate_design_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Space-Filling LHS Design — generate_design_lhs","text":"","code":"ps = ParamSet$new(list(   ParamDbl$new(\"ratio\", lower = 0, upper = 1),   ParamFct$new(\"letters\", levels = letters[1:3]) ))  if (requireNamespace(\"lhs\", quietly = TRUE)) {   generate_design_lhs(ps, 10) } #> <Design> with 10 rows: #>          ratio letters #>  1: 0.75160434       b #>  2: 0.29309947       a #>  3: 0.63553953       b #>  4: 0.09951235       c #>  5: 0.49748362       b #>  6: 0.35152183       c #>  7: 0.50993819       a #>  8: 0.84851789       b #>  9: 0.97580093       c #> 10: 0.16902208       a"},{"path":"https://paradox.mlr-org.com/reference/generate_design_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Random Design — generate_design_random","title":"Generate a Random Design — generate_design_random","text":"Generates design randomly drawn points. Internally uses SamplerUnif, hence, also works ParamSets dependencies. dependencies hold, values set NA resulting data.table.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Random Design — generate_design_random","text":"","code":"generate_design_random(param_set, n)"},{"path":"https://paradox.mlr-org.com/reference/generate_design_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Random Design — generate_design_random","text":"param_set (ParamSet). n (integer(1)) Number points draw randomly.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Random Design — generate_design_random","text":"Design.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/generate_design_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Random Design — generate_design_random","text":"","code":"ps = ParamSet$new(list(   ParamDbl$new(\"ratio\", lower = 0, upper = 1),   ParamFct$new(\"letters\", levels = letters[1:3]) )) generate_design_random(ps, 10) #> <Design> with 10 rows: #>         ratio letters #>  1: 0.8019348       a #>  2: 0.1278856       c #>  3: 0.5788432       c #>  4: 0.8406088       c #>  5: 0.7080743       a #>  6: 0.8993718       c #>  7: 0.8549299       c #>  8: 0.3560387       a #>  9: 0.2027252       a #> 10: 0.8700368       c"},{"path":"https://paradox.mlr-org.com/reference/generate_design_sobol.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","title":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","text":"Generate space-filling design using Sobol sequence. Dependent parameters whose constraints unsatisfied generate NA entries respective columns. Uses spacefillr::generate_sobol_set. Note non determinism achieved sampling seed argument via sample(.Machine$integer.max, size = 1L).","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_sobol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","text":"","code":"generate_design_sobol(param_set, n)"},{"path":"https://paradox.mlr-org.com/reference/generate_design_sobol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","text":"param_set (ParamSet). n (integer(1))  Number points sample.","code":""},{"path":"https://paradox.mlr-org.com/reference/generate_design_sobol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","text":"Design.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/generate_design_sobol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Space-Filling Sobol Sequence Design — generate_design_sobol","text":"","code":"ps = ParamSet$new(list(   ParamDbl$new(\"ratio\", lower = 0, upper = 1),   ParamFct$new(\"letters\", levels = letters[1:3]) ))  if (requireNamespace(\"spacefillr\", quietly = TRUE)) {   generate_design_sobol(ps, 10) } #> <Design> with 10 rows: #>           ratio letters #>  1: 0.508257866       c #>  2: 0.008257881       b #>  3: 0.258257866       c #>  4: 0.758257866       a #>  5: 0.633257866       a #>  6: 0.133257881       c #>  7: 0.383257866       a #>  8: 0.883257866       b #>  9: 0.820757866       c #> 10: 0.320757866       a"},{"path":"https://paradox.mlr-org.com/reference/paradox-package.html","id":null,"dir":"Reference","previous_headings":"","what":"paradox: Define and Work with Parameter Spaces for Complex Algorithms — paradox-package","title":"paradox: Define and Work with Parameter Spaces for Complex Algorithms — paradox-package","text":"Define parameter spaces, constraints dependencies arbitrary algorithms, program spaces. Also includes statistical designs random samplers. Objects implemented 'R6' classes.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/paradox-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"paradox: Define and Work with Parameter Spaces for Complex Algorithms — paradox-package","text":"Maintainer: Michel Lang michellang@gmail.com (ORCID) Authors: Bernd Bischl bernd_bischl@gmx.net (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Xudong Sun smilesun.east@gmail.com (ORCID) Martin Binder mlr.developer@mb706.com contributors: Marc Becker marcbecker@posteo.de (ORCID) [contributor]","code":""},{"path":"https://paradox.mlr-org.com/reference/ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a ParamSet using Short Forms — ps","title":"Construct a ParamSet using Short Forms — ps","text":"ps() short form constructor uses Domain objects (p_dbl, p_fct, ...) construct ParamSets succinct readable way. specifics also see documentation Domain.","code":""},{"path":"https://paradox.mlr-org.com/reference/ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a ParamSet using Short Forms — ps","text":"","code":"ps(..., .extra_trafo = NULL, .allow_dangling_dependencies = FALSE)"},{"path":"https://paradox.mlr-org.com/reference/ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a ParamSet using Short Forms — ps","text":"... (Domain | Param) Named arguments Domain Param objects. ParamSet constructed given Params, Params constructed given domains. names arguments used $id ($id Param arguments ignored). .extra_trafo (function(x, param_set)) Transformation set resulting ParamSet's $trafo value . addition trafo Domain objects given ..., run transformations individual parameters performed. .allow_dangling_dependencies (logical) Whether dependencies depending parameters present allowed. parameter x depends = y == 0 y present ps() call usually throw error, dangling dependencies allowed, dependency added regardless. usually bad idea mainly internal use. Dependencies ParamSets using to_tune() can realized using .","code":""},{"path":"https://paradox.mlr-org.com/reference/ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a ParamSet using Short Forms — ps","text":"ParamSet object.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a ParamSet using Short Forms — ps","text":"","code":"pars = ps(   a = p_int(0, 10),   b = p_int(upper = 20),   c = p_dbl(),   e = p_fct(letters[1:3]),   f = p_uty(custom_check = checkmate::check_function) ) print(pars) #> <ParamSet> #>    id    class lower upper nlevels        default value #> 1:  a ParamInt     0    10      11 <NoDefault[3]>       #> 2:  b ParamInt  -Inf    20     Inf <NoDefault[3]>       #> 3:  c ParamDbl  -Inf   Inf     Inf <NoDefault[3]>       #> 4:  e ParamFct    NA    NA       3 <NoDefault[3]>       #> 5:  f ParamUty    NA    NA     Inf <NoDefault[3]>        pars = ps(   a = p_dbl(0, 1, trafo = exp),   b = p_dbl(0, 1, trafo = exp),   .extra_trafo = function(x, ps) {     x$c <- x$a + x$b     x   } )  # See how the addition happens after exp()ing: pars$trafo(list(a = 0, b = 0)) #> $a #> [1] 1 #>  #> $b #> [1] 1 #>  #> $c #> [1] 2 #>   pars$values = list(   a = to_tune(ps(x = p_int(0, 1),     .extra_trafo = function(x, param_set) list(a = x$x)   )),   # make 'y' depend on 'x', but they are defined in different ParamSets   # Therefore we need to allow dangling dependencies here.   b = to_tune(ps(y = p_int(0, 1, depends = x == 1),     .extra_trafo = function(x, param_set) list(b = x$y),     .allow_dangling_dependencies = TRUE   )) )  pars$search_space() #> <ParamSet> #>    id    class lower upper nlevels        default parents value #> 1:  x ParamInt     0     1       2 <NoDefault[3]>               #> 2:  y ParamInt     0     1       2 <NoDefault[3]>       x       #> Trafo is set."},{"path":"https://paradox.mlr-org.com/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. data.table .data.table","code":""},{"path":"https://paradox.mlr-org.com/reference/to_tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate that a Parameter Value should be Tuned — to_tune","title":"Indicate that a Parameter Value should be Tuned — to_tune","text":"to_tune() creates TuneToken object can assigned $values slot ParamSet alternative concrete value. indicates value given directly tuned using bbotk mlr3tuning. thus parameterized object invoked directly, without wrapped given tuner, give error. tuning range ParamSet constructed TuneToken values ParamSet's $values slot can accessed ParamSet$search_space() method. done automatically tuners tuning range given, also possible access $search_space() method, modify , give modified ParamSet tuning function (anything else , nobody judging ). TuneToken represents range parameter whose $values slot occupies tuned . can constructed via to_tune() function one several ways: to_tune(): Indicates parameter tuned entire range. applies finite parameters (.e. discrete bounded numeric parameters) to_tune(lower, upper, logscale): Indicates numeric parameter tuned inclusive interval spanning lower upper, possibly log scale logscale se TRUE. parameters optional, parameter's lower / upper bounds used without log scale, default. Depending parameter, integer (ParamInt) real values (ParamDbl) used.lower, upper, logscale can given position, except one given, case must named disambiguate following cases. logscale TRUE, trafo generated automatically transforms given bounds. bounds log()'d pre-trafo (see examples). See logscale argument Domain functions info. Note \"logscale\" inherited Param TuneToken belongs ! Defining parameter p_dbl(... logscale = TRUE) automatically give to_tune() assigned log-scale. to_tune(levels): Indicates parameter tuned given discrete values. levels can named unnamed atomic vector list (although unnamed case must possible construct corresponding character vector distinct values using .character). to_tune(<Domain>): given Domain object (constructed e.g. p_int() p_fct()) indicates range tuned . supplied trafo function used parameter transformation. to_tune(<Param>): given Param object indicates range tuned . to_tune(<ParamSet>): given ParamSet used tune single Param. useful cases single evaluation-time parameter value (e.g. ParamUty) constructed multiple tuner-visible parameters (may ParamUty). supplied ParamSet always contain $trafo function, must always return list single entry. TuneToken object's internals subject change relied upon. TuneToken objects constructed via to_tune(), used giving $values ParamSet.","code":""},{"path":"https://paradox.mlr-org.com/reference/to_tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate that a Parameter Value should be Tuned — to_tune","text":"","code":"to_tune(...)"},{"path":"https://paradox.mlr-org.com/reference/to_tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate that a Parameter Value should be Tuned — to_tune","text":"... given, restricts range tuning , described .","code":""},{"path":"https://paradox.mlr-org.com/reference/to_tune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicate that a Parameter Value should be Tuned — to_tune","text":"TuneToken object.","code":""},{"path":[]},{"path":"https://paradox.mlr-org.com/reference/to_tune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicate that a Parameter Value should be Tuned — to_tune","text":"","code":"params = ParamSet$new(list(   ParamInt$new(\"int\", 0, 10),   ParamInt$new(\"int_unbounded\"),   ParamDbl$new(\"dbl\", 0, 10),   ParamDbl$new(\"dbl_unbounded\"),   ParamDbl$new(\"dbl_bounded_below\", lower = 1),   ParamFct$new(\"fct\", c(\"a\", \"b\", \"c\")),   ParamUty$new(\"uty1\"),   ParamUty$new(\"uty2\"),   ParamUty$new(\"uty3\"),   ParamUty$new(\"uty4\"),   ParamUty$new(\"uty5\") ))  params$values = list(    # tune over entire range of `int`, 0..10:   int = to_tune(),    # tune over 2..7:   int_unbounded = to_tune(2, 7),    # tune on a log scale in range 1..10;   # recognize upper bound of 10 automatically, but restrict lower bound to 1:   dbl = to_tune(lower = 1, logscale = TRUE),   ## This is equivalent to the following:   # dbl = to_tune(p_dbl(log(1), log(10), trafo = exp)),    # nothing keeps us from tuning a dbl over integer values   dbl_unbounded = to_tune(p_int(1, 10)),    # tune over values \"a\" and \"b\" only   fct = to_tune(c(\"a\", \"b\")),    # tune over integers 2..8.   # ParamUty needs type information in form of p_xxx() in to_tune.   uty1 = to_tune(p_int(2, 8)),    # tune uty2 like a factor, trying 1, 10, and 100:   uty2 = to_tune(c(1, 10, 100)),    # tune uty3 like a factor. The factor levels are the names of the list   # (\"exp\", \"square\"), but the trafo will generate the values from the list.   # This way you can tune an objective that has function-valued inputs.   uty3 = to_tune(list(exp = exp, square = function(x) x^2)),    # tune through multiple parameters. When doing this, the ParamSet in tune()   # must have the trafo that generates a list with one element and the right   # name:   uty4 = to_tune(ps(     base = p_dbl(0, 1),     exp = p_int(0, 3),     .extra_trafo = function(x, param_set) {       list(uty4 = x$base ^ x$exp)     }   )),    # not all values need to be tuned!   uty5 = 100 )  print(params$values) #> $int #> Tuning over: #> <entire parameter range> #>  #>  #> $int_unbounded #> Tuning over: #> range [2, 7] #>  #>  #> $dbl #> Tuning over: #> range [1, ...] (log scale) #>  #>  #> $dbl_unbounded #> Tuning over: #> p_int(lower = 1, upper = 10) #>  #> $fct #> Tuning over: #> p_fct(levels = c(\"a\", \"b\")) #>  #> $uty1 #> Tuning over: #> p_int(lower = 2, upper = 8) #>  #> $uty2 #> Tuning over: #> p_fct(levels = c(\"1\", \"10\", \"100\")) #>  #> $uty3 #> Tuning over: #> p_fct(levels = c(\"exp\", \"square\")) #>  #> $uty4 #> Tuning over: #> <ParamSet> #>      id    class lower upper nlevels        default value #> 1: base ParamDbl     0     1     Inf <NoDefault[3]>       #> 2:  exp ParamInt     0     3       4 <NoDefault[3]>       #> Trafo is set. #>  #> $uty5 #> [1] 100 #>   print(params$search_space()) #> <ParamSet> #>                id    class lower     upper nlevels        default value #>  1:           int ParamInt     0 10.000000      11 <NoDefault[3]>       #>  2: int_unbounded ParamInt     2  7.000000       6 <NoDefault[3]>       #>  3:           dbl ParamDbl     0  2.302585     Inf <NoDefault[3]>       #>  4: dbl_unbounded ParamInt     1 10.000000      10 <NoDefault[3]>       #>  5:           fct ParamFct    NA        NA       2 <NoDefault[3]>       #>  6:          uty1 ParamInt     2  8.000000       7 <NoDefault[3]>       #>  7:          uty2 ParamFct    NA        NA       3 <NoDefault[3]>       #>  8:          uty3 ParamFct    NA        NA       2 <NoDefault[3]>       #>  9:          base ParamDbl     0  1.000000     Inf <NoDefault[3]>       #> 10:           exp ParamInt     0  3.000000       4 <NoDefault[3]>       #> Trafo is set.  # Change `$values` directly and generate new `$search_space()` to play around params$values$uty3 = 8 params$values$uty2 = to_tune(c(2, 4, 8))  print(params$search_space()) #> <ParamSet> #>               id    class lower     upper nlevels        default value #> 1:           int ParamInt     0 10.000000      11 <NoDefault[3]>       #> 2: int_unbounded ParamInt     2  7.000000       6 <NoDefault[3]>       #> 3:           dbl ParamDbl     0  2.302585     Inf <NoDefault[3]>       #> 4: dbl_unbounded ParamInt     1 10.000000      10 <NoDefault[3]>       #> 5:           fct ParamFct    NA        NA       2 <NoDefault[3]>       #> 6:          uty1 ParamInt     2  8.000000       7 <NoDefault[3]>       #> 7:          uty2 ParamFct    NA        NA       3 <NoDefault[3]>       #> 8:          base ParamDbl     0  1.000000     Inf <NoDefault[3]>       #> 9:           exp ParamInt     0  3.000000       4 <NoDefault[3]>       #> Trafo is set.  # Notice how `logscale` applies `log()` to lower and upper bound pre-trafo: params = ParamSet$new(list(ParamDbl$new(\"x\")))  params$values$x = to_tune(1, 100, logscale = TRUE)  print(params$search_space()) #> <ParamSet> #>    id    class lower   upper nlevels        default value #> 1:  x ParamDbl     0 4.60517     Inf <NoDefault[3]>       #> Trafo is set.  grid = generate_design_grid(params$search_space(), 3)  # The grid is equidistant within log-bounds pre-trafo: print(grid) #> <Design> with 3 rows: #>           x #> 1: 0.000000 #> 2: 2.302585 #> 3: 4.605170  # But the values are on a log scale scale with desired bounds after trafo: print(grid$transpose()) #> [[1]] #> [[1]]$x #> [1] 1 #>  #>  #> [[2]] #> [[2]]$x #> [1] 10 #>  #>  #> [[3]] #> [[3]]$x #> [1] 100 #>  #>"},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-0100","dir":"Changelog","previous_headings":"","what":"paradox 0.10.0","title":"paradox 0.10.0","text":"CRAN release: 2022-08-05 Reset .has_extra_trafo FALSE trafo set NULL. rd_info.ParamSet collapses vector \"\\n\" due changes roxygen 7.2.0 Add method set_values() conveniently add parameter values.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-090","dir":"Changelog","previous_headings":"","what":"paradox 0.9.0","title":"paradox 0.9.0","text":"CRAN release: 2022-04-18 Added default_values() function extract default values ParamSet objects.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-080","dir":"Changelog","previous_headings":"","what":"paradox 0.8.0","title":"paradox 0.8.0","text":"CRAN release: 2022-01-31 Parameters now new (optional) field description. Improved printing parameters documentation (#355). warning now signaled package ParamHelpers also loaded. Fixed links.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-071","dir":"Changelog","previous_headings":"","what":"paradox 0.7.1","title":"paradox 0.7.1","text":"CRAN release: 2021-03-07 Sampler1D also accept ParamSets one Param now (#335). Fixed sampling zero rows Sampler1DRfun (#338). to_tune(), p_dbl(), p_int() accept logscale argument tuning logarithmic scale. to_tune can called lower upper now infer bound possible.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-070","dir":"Changelog","previous_headings":"","what":"paradox 0.7.0","title":"paradox 0.7.0","text":"CRAN release: 2021-01-23 ParamSet$get_values() checks whether required parameter values set. Required parameter checked anymore new values added parameter set. ParamSet$check_dt() accepts data.frames. Rename is_numeric is_categorical all_numeric all_categorical. Rename requires depends.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-060","dir":"Changelog","previous_headings":"","what":"paradox 0.6.0","title":"paradox 0.6.0","text":"CRAN release: 2020-12-04 ps() shortcuts ParamSet construction, new Domain construct constructors p_dbl, p_int, p_lgl, p_fct, p_uty. ParamSet$search_space() method constructs tunable ParamSet TuneToken objects, constructed to_tune().","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-050","dir":"Changelog","previous_headings":"","what":"paradox 0.5.0","title":"paradox 0.5.0","text":"CRAN release: 2020-10-21 Compact -memory representation R6 objects save space saving objects via saveRDS(), serialize() etc. Improved performance ParamSetCollection.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-040","dir":"Changelog","previous_headings":"","what":"paradox 0.4.0","title":"paradox 0.4.0","text":"CRAN release: 2020-07-21 New public methods is_numeric() is_categorical() parameter sets. Fixed test upcoming release data.table(). Added helper function format parameter sets Rd files.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-030","dir":"Changelog","previous_headings":"","what":"paradox 0.3.0","title":"paradox 0.3.0","text":"CRAN release: 2020-07-07 New function transpose() converts data.table parameter values list lists. New methods ParamSet$check_dt(), $assert_dt() test_dt() can check data.table valid parameter values. Documentation updated. Unified style object printers.","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-020","dir":"Changelog","previous_headings":"","what":"paradox 0.2.0","title":"paradox 0.2.0","text":"CRAN release: 2020-04-15 Fixed warnings partial argument matching. Enforce integer bounds ParamInt (#258). Reexport data.table::.data.table(). Deep cloning ParamSet$values (#273).","code":""},{"path":"https://paradox.mlr-org.com/news/index.html","id":"paradox-010","dir":"Changelog","previous_headings":"","what":"paradox 0.1.0","title":"paradox 0.1.0","text":"CRAN release: 2019-07-12 Initial release.","code":""}]
